name: Terraform Destroy

on:
  workflow_dispatch:   # Run manually only (safe!)
    inputs:
      confirm:
        description: "Type 'DESTROY' to confirm resource deletion"
        required: true

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest

    if: github.event.inputs.confirm == 'DESTROY'  # Safety check

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3Ô∏è‚É£ Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8  # or latest stable

      # 4Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./iac

      # 5Ô∏è‚É£ Backup EC2 Data to S3 BEFORE Destroy
      - name: Backup EC2 Data to S3
        run: |
          echo "üöÄ Running final backup before destroy..."
          EC2_IP=$(terraform -chdir=./iac output -raw ec2_public_ip || echo "")
          if [ -n "$EC2_IP" ]; then
            chmod 400 ./iac/private_key.pem
            ssh -o StrictHostKeyChecking=no -i ./iac/private_key.pem ubuntu@$EC2_IP \
              "aws s3 sync /home/ubuntu/data s3://terraform-ec2-backup-bucket-2025-88/ --region us-east-1 || echo '‚ö†Ô∏è No data to sync, skipping backup.'"
          else
            echo "‚ö†Ô∏è No EC2 instance found. Skipping backup."
          fi

      # 6Ô∏è‚É£ Terraform Destroy (Auto-Approve)
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./iac
