name: Terraform Destroy

on:
  workflow_dispatch:   # Run manually only (safe!)
    inputs:
      confirm:
        description: "Type 'DESTROY' to confirm resource deletion"
        required: true

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'DESTROY'

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      # 4Ô∏è‚É£ Terraform Init (reconfigure remote state)
      - name: Terraform Init
        run: terraform init -reconfigure -input=false
        working-directory: ./iac

      # 5Ô∏è‚É£ Show Current State (Optional but helpful)
      - name: Terraform State List
        run: |
          echo "Listing resources in Terraform state..."
          terraform state list || echo "‚ö†Ô∏è No resources found in state"
        working-directory: ./iac

      # 6Ô∏è‚É£ Terraform Destroy (fails if no resources)
      - name: Terraform Destroy
        run: |
          if terraform state list | grep .; then
            echo "üöÄ Destroying all resources..."
            terraform destroy -auto-approve -input=false
          else
            echo "‚ö†Ô∏è No resources to destroy. Exiting."
          fi
        working-directory: ./iac
